{"designerVersion":"1.1.7","id":"pbButton","name":"Button","lastUpdate":1444745078834,"template":"<div class=\"text-{{ properties.alignment }}\">\n    <button\n        ng-class=\"'btn btn-' + properties.buttonStyle\"\n        ng-click=\"ctrl.action()\"\n        type=\"button\"\n        ng-disabled=\"properties.disabled\">{{ properties.label | uiTranslate }}</button>\n</div>\n","icon":"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 20'><g><path fill='#CBD5E1' d='M47,15.2c0,0.7-1.7,1.8-1.7,1.8S4.8,17,3.7,17c-1.6,0-3.6-1.9-3.6-1.9s0.7,4.8,4,5c2.4,0.1,42.4,0,42.4,0 s3.5-0.2,3.5-3.6c0-1.3,0.1-11.5,0.1-12.4c-0.1-2-4-4-4-4L47,1.8C47,1.8,47,14.5,47,15.2z'/><path fill='#fff' d='M3.9,1h40.3C45.7,1,47,2.2,47,3.6v10.8c0,1.4-1.3,2.6-2.9,2.6H3.9C2.3,17,1,15.8,1,14.4V3.6 C1,2.2,2.3,1,3.9,1z M3,0C1.3,0,0,1.3,0,3v12c0,1.7,1.3,3,3,3h42c1.7,0,3-1.3,3-3V3c0-1.7-1.3-3-3-3H3z'/></g></svg>","controller":"function PbButtonCtrl($scope, $http, $timeout, $location, $log, $window) {\n\n  'use strict';\n\n  this.action = function action() {\n    var id;\n\n    if ($scope.properties.action === 'Remove from collection') {\n      removeFromCollection();\n    } else if ($scope.properties.action === 'Add to collection') {\n      addToCollection();\n    } else if ($scope.properties.action === \"Start process\") {\n      id = getUrlParam('id');\n      if (id) {\n        doRequestDelayed('POST', '../API/bpm/process/' + id + '/instantiation', getUserParam());\n      } else {\n        $log.log('Impossible to retrieve the process definition id value from the URL');\n      }\n    } else if ($scope.properties.action === 'Submit task') {\n      id = getUrlParam('id');\n      if (id) {\n        doRequestDelayed('POST', '../API/bpm/userTask/' + getUrlParam('id') + '/execution', getUserParam());\n      } else {\n        $log.log('Impossible to retrieve the task id value from the URL');\n      }\n    } else if ($scope.properties.url) {\n      doRequestDelayed($scope.properties.action, $scope.properties.url);\n    }\n  };\n\n  function removeFromCollection() {\n    if ($scope.properties.collectionToModify) {\n      if (!Array.isArray($scope.properties.collectionToModify)) {\n        throw 'Collection property for widget button should be an array, but was ' + $scope.properties.collectionToModify;\n      }\n      var index = -1;\n      if ($scope.properties.collectionPosition === 'First') {\n        index = 0;\n      } else if ($scope.properties.collectionPosition === 'Last') {\n        index = $scope.properties.collectionToModify.length -1;\n      } else if ($scope.properties.collectionPosition === 'Item') {\n        index = $scope.properties.collectionToModify.indexOf($scope.properties.removeItem);\n      }\n\n      // Only remove element for valid index\n      if ( index !== -1) {\n        $scope.properties.collectionToModify.splice(index, 1);\n      }\n    }\n  }\n\n  function addToCollection() {\n    if (!$scope.properties.collectionToModify) {\n      $scope.properties.collectionToModify = [];\n    }\n    if (!Array.isArray($scope.properties.collectionToModify)) {\n      throw 'Collection property for widget button should be an array, but was ' + $scope.properties.collectionToModify;\n    }\n    var item = angular.copy($scope.properties.valueToAdd);\n\n    if ($scope.properties.collectionPosition === 'First') {\n      $scope.properties.collectionToModify.unshift(item);\n    } else {\n      $scope.properties.collectionToModify.push(item);\n    }\n  }\n\n  // we delayed the doRequest to ensure dataToSend is updated\n  // this usefull when copy() update the dataToSend object.\n  function doRequestDelayed(method, url, params) {\n    $scope.properties\n      .waitFor('dataToSend')\n      .then(doRequest.bind(null, method, url, params));\n  }\n\n  /**\n   * Execute a get/post request to an URL\n   * It also bind custom data from success|error to a data\n   * @return {void}\n   */\n  function doRequest(method, url, params) {\n     var req = {\n      method: method,\n      url: url,\n      data: angular.copy($scope.properties.dataToSend),\n      params: params\n    };\n\n    return $http(req)\n      .success(function (data) {\n        if ($scope.properties.targetUrlOnSuccess) {\n          $window.top.location.assign($scope.properties.targetUrlOnSuccess);\n        }\n        $scope.properties.dataFromSuccess = data;\n      })\n      .error(function (data) {\n        $scope.properties.dataFromError = data;\n      });\n  }\n\n  function getUserParam() {\n    var userId = getUrlParam('user');\n    if (userId) {\n      return {'user': userId};\n    }\n    return {};\n  }\n\n  /**\n   * Extract the param value from a URL query\n   * e.g. if param = \"id\", it extracts the id value in the following cases:\n   *  1. http://localhost/bonita/portal/resource/process/ProcName/1.0/content/?id=8880000\n   *  2. http://localhost/bonita/portal/resource/process/ProcName/1.0/content/?param=value&id=8880000&locale=en\n   *  3. http://localhost/bonita/portal/resource/process/ProcName/1.0/content/?param=value&id=8880000&locale=en#hash=value\n   * @returns {id}\n   */\n  function getUrlParam(param) {\n    var paramValue = $location.absUrl().match('[//?&]' + param + '=([^&#]*)($|[&#])');\n    if (paramValue) {\n      return paramValue[1];\n    }\n    return '';\n  }\n}\n","description":"Trigger for an action in a page or form","custom":false,"order":13,"properties":[{"label":"Disabled","name":"disabled","type":"boolean","defaultValue":false,"bond":"expression"},{"label":"Label","name":"label","type":"text","defaultValue":"Submit","bond":"interpolation"},{"label":"Alignment","name":"alignment","type":"choice","defaultValue":"left","choiceValues":["left","center","right"],"bond":"constant"},{"label":"Style","name":"buttonStyle","type":"choice","defaultValue":"default","choiceValues":["default","primary","success","info","warning","danger","link"],"bond":"constant"},{"label":"Action","name":"action","type":"choice","defaultValue":"Submit task","choiceValues":["Submit task","Start process","POST","PUT","Add to collection","Remove from collection"],"bond":"constant"},{"label":"URL to call","name":"url","caption":"Send data to this URL when the button is clicked","help":"URL used to perform the HTTP request when this button is clicked.","showFor":"properties.action.value === 'POST' || properties.action.value === 'PUT'","type":"text","bond":"interpolation"},{"label":"Data sent on click","name":"dataToSend","help":"Can be used to fulfill a contract","showFor":"properties.action.value === 'POST' || properties.action.value === 'PUT' || properties.action.value === 'Submit task' || properties.action.value ===  'Start process'","type":"text","bond":"expression"},{"label":"Successful response value","name":"dataFromSuccess","help":"Holds the response when the request is successful","showFor":"properties.action.value === 'POST' || properties.action.value === 'PUT' || properties.action.value === 'Submit task' || properties.action.value ===  'Start process'","type":"text","bond":"variable"},{"label":"Failed response value","name":"dataFromError","help":"Holds the response when the request has failed","showFor":"properties.action.value === 'POST' || properties.action.value === 'PUT' || properties.action.value === 'Submit task' || properties.action.value ===  'Start process'","type":"text","bond":"variable"},{"label":"Target URL on success","name":"targetUrlOnSuccess","help":"That is the next location. In the case of an application built using the Bonita BPM Portal, combine your application URL with the page token","showFor":"properties.action.value === 'POST' || properties.action.value === 'PUT' || properties.action.value === 'Submit task' || properties.action.value ===  'Start process'","type":"text","bond":"interpolation"},{"label":"Collection","name":"collectionToModify","caption":"Must be an array","showFor":"properties.action.value === 'Remove from collection' || properties.action.value === 'Add to collection'","type":"collection","bond":"variable"},{"label":"Add","name":"collectionPosition","showFor":"properties.action.value === 'Add to collection'","type":"choice","defaultValue":"Last","choiceValues":["First","Last"],"bond":"constant"},{"label":"Value to add","name":"valueToAdd","showFor":"properties.action.value === 'Add to collection'","type":"text","bond":"expression"},{"label":"Remove","name":"collectionPosition","showFor":"properties.action.value === 'Remove from collection'","type":"choice","defaultValue":"Last","choiceValues":["First","Item","Last"],"bond":"constant"},{"label":"Item to remove","name":"removeItem","help":"Use $item to remove the current item in a repeated collection","showFor":"properties.action.value === 'Remove from collection' && properties.collectionPosition.value === 'Item'","type":"text","bond":"variable"}],"assets":[]}